<canvas id="@chartIdentifier"></canvas>


@using System.Text.Json
@using System.Web
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime;

<ChartJSImport />
<script>
    window.renderChart = (chartId, chartType, chartLabels, dataLabel, chartData, fontSize) => {
        Chart.register(ChartDataLabels);

        new Chart(document.getElementById(chartId), {
            type: chartType,
            data: {
                labels: JSON.parse(chartLabels),
                datasets: [{
                    label: dataLabel,
                    data: chartData,
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    datalabels: {
                        color: '#000', // Label color
                        formatter: (value, ctx) => {
                                const label = ctx.chart.data.labels[ctx.dataIndex];
                                return `${value} %`; // Show label and value
                        },
                        anchor: 'end',
                        align: 'start',
                        offset: 10,
                        font: {
                            size: fontSize,
                        }
                    },
                    colors: {
                        forceOverride: true
                    }
                }
            }
        });
    };
</script>

@code {
    private string chartIdentifier { get; set; } = Guid.NewGuid().ToString(); // Default unique identifier

    [Parameter]
    public string ChartTitle { get; set; } = "Default ChartTitle";

    [Parameter]
    public ChartType ChartType { get; set; } = ChartType.Bar; // Default Chart type

    [Parameter]
    public string DataLabel { get; set; } = "Label"; // Default Chart Data Label

    [Parameter]
    public Dictionary<string, object>? ChartData { get; set; } = new()
        {
            {"SampleData 1", 20},
            {"SampleData 2", 20},
            {"SampleData 3", 20},
            {"SampleData 4", 20}
        };

    [Parameter]
    public int LabelFontSize { get; set; } = 14;

    private string[] chartLabel => ChartData.Keys.ToArray();
    private string chartData => JsonSerializer.Serialize(ChartData.Values.ToArray());

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("renderChart", chartIdentifier, ChartType.ToString().ToLower(), JsonSerializer.Serialize(chartLabel), JsonSerializer.Serialize(DataLabel), ChartData.Values, LabelFontSize);
        }
    }
}
