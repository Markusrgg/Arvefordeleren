@page "/arvinger"
@rendermode InteractiveServer

@layout InformationLayout

@inject TestatorService TestatorService
@inject HeirService HeirService
@inject NavigationManager NavigationManager

@if (!testators.Any())
{
    <h3>Udfyld personoplysninger fra forrige side først!</h3>
}
else
{
    <h3>Indtast arvingens oplysninger</h3>

    <EditForm Model="heir" OnValidSubmit="HandleValidSubmit" FormName="heirForm">
        <DataAnnotationsValidator />

        <div class="row mb-3">
            <div class="col-2">
                <label class="col-form-label">Fornavn</label>
            </div>
            <div class="col-6">
                <InputText @bind-Value="heir.FirstName" class="form-control" />
            </div>
            <div class="col">
                <ValidationMessage For="() => heir.FirstName" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-2">
                <label class="col-form-label">Efternavn</label>
            </div>
            <div class="col-6">
                <InputText @bind-Value="heir.LastName" class="form-control" />
            </div>
            <div class="col">
                <ValidationMessage For="() => heir.LastName" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-2">
                <label class="col-form-label">Relation</label>
            </div>
            <div class="col-6">
                <InputSelect @bind-Value="heir.RelationType" class="form-control">
                    @foreach (RelationType relation in Enum.GetValues(typeof(RelationType)))
                    {
                        if (relation != RelationType.MARRIED && relation != RelationType.INDIVIDUAL)
                        {
                            <option value="@relation">@relation.GetDisplayName()</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>
        @if (heir.RelationType == RelationType.CHILD_SEPERATE)
        {
            <div class="row mb-3">
                <div class="col-2">
                    <label class="col-form-label">Forældre</label>
                </div>
                <div class="col-6">
                    <InputSelect @bind-Value="heir.Mid" class="form-control">
                        @foreach (Testator testator in testators)
                        {
                            <option value="@testator.Id">@testator.RelationType.GetDisplayName(): @testator.FullName</option>
                        }
                    </InputSelect>
                </div>
            </div>
        }

        @if (heir.RelationType == RelationType.GRAND_CHILD)
        {
            <div class="row mb-3">
                <div class="col-2">
                    <label class="col-form-label">Forældre</label>
                </div>
                <div class="col-6">
                    <InputSelect @bind-Value="heir.Mid" class="form-control">
                        @foreach (var heir in heirs)
                        {
                            if (heir.RelationType == RelationType.CHILD || heir.RelationType == RelationType.CHILD_SEPERATE)
                            {
                                <option value="@heir.Id">@heir.RelationType.GetDisplayName(): @heir.FullName</option>
                            }
                        }
                    </InputSelect>
                </div>
            </div>
        }
        @if (heir.RelationType == RelationType.SIBLING)
        {
            <div class="row mb-3">
                <div class="col-2">
                    <label class="col-form-label">Søskende</label>
                </div>
                <div class="col-6">
                    <InputSelect @bind-Value="heir.Mid" class="form-control">
                        @foreach (Testator testator in testators)
                        {
                            <option value="@testator.Id">@testator.RelationType.GetDisplayName(): @testator.FullName</option>
                        }
                        @foreach (var heir in heirs)
                        {
                            <option value="@heir.Id">@heir.RelationType.GetDisplayName(): @heir.FullName</option>
                        }
                    </InputSelect>
                </div>
            </div>
        }
        @if (heir.RelationType == RelationType.OTHER)
        {
            <div class="row mb-3">
                <div class="col-2">
                    <label class="col-form-label">Relation</label>
                </div>
                <div class="col-6">
                    <InputSelect @bind-Value="heir.Mid" class="form-control">
                        @foreach (Testator testator in testators)
                        {
                            <option value="@testator.Id">@testator.RelationType.GetDisplayName(): @testator.FullName</option>
                        }
                        @foreach (var heir in heirs)
                        {
                            <option value="@heir.Id">@heir.RelationType.GetDisplayName(): @heir.FullName</option>
                        }
                    </InputSelect>
                </div>
            </div>
        }
        @if (heir.RelationType == RelationType.PARTNER)
        {
            <div class="row mb-3">
                <div class="col-2">
                    <label class="col-form-label">Samlever</label>
                </div>
                <div class="col-6">
                    <InputSelect @bind-Value="heir.Mid" class="form-control">
                        @foreach (Testator testator in testators)
                        {
                            if (testator.RelationType != RelationType.MARRIED)
                            {
                                <option value="@testator.Id">@testator.RelationType.GetDisplayName(): @testator.FullName</option>
                            }
                        }
                        @foreach (var heir in heirs)
                        {
                            <option value="@heir.Id">@heir.RelationType.GetDisplayName(): @heir.FullName</option>
                        }
                    </InputSelect>
                </div>
            </div>
        }

        <div class="mb-3">
            <div class="col-2">
                <button type="submit" class="btn btn-success">@(isEditing == false ? "Tilføj arving" : "Opdater arving")</button>
            </div>
        </div>
        <div class="mb-3">
            <div class="col-2">
                <button type="button" class="btn btn-primary" @onclick="NavigateToAssets">Videre til aktiver</button>
            </div>
        </div>
    </EditForm>

    <div class="container mt-5">
        <h4>Arvinger</h4>

        @if (heirs.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Fornavn</th>
                        <th>Efternavn</th>
                        <th>Relation</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var heir in heirs)
                    {
                        <tr>
                            <td>@heir.FirstName</td>
                            <td>@heir.LastName</td>
                            <td>@heir.RelationType.GetDisplayName()</td>
                            <td><button class="btn btn-primary" @onclick="(() => Edit(heir.Id))">Rediger</button></td>
                            <td><button class="btn btn-danger" @onclick="(() => Delete(heir.Id))">Slet</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Ingen arvinger tilføjet endnu.</p>
        }
    </div>

    <br />

    <div class="container mt-5">
        <h4>Familie træ</h4>
        <Family @ref="family" />
    </div>
}

@code
{
    private Family family;

    private Heir heir = new Heir { RelationType = RelationType.CHILD };
    private List<Heir> heirs = new List<Heir>();

    private List<Testator> testators = new List<Testator>();

    private bool isEditing = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Setup();
            StateHasChanged();
        }
    }

    private async Task Setup()
    {
        testators = await TestatorService.GetAll();
        heirs = await HeirService.GetAll();
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(heir.FirstName) && !string.IsNullOrEmpty(heir.LastName))
        {
            if (!isEditing)
            {
                heir.Id = Guid.NewGuid();

                heirs.Add(new Heir
                    {
                        FirstName = heir.FirstName,
                        LastName = heir.LastName,
                        Mid = heir.Mid,
                        Fid = heir.Fid,
                        RelationType = heir.RelationType,
                        Id = heir.Id
                    });

                await HeirService.Create(heir);
            }
            else
            {
                await HeirService.Update(heir);
                isEditing = false;
            }

            heir = new Heir { RelationType = RelationType.CHILD };


            family.Refresh();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Fornavn og efternavn er påkrævet.");
        }
    }

    private async void Delete(Guid id)
    {
        await HeirService.Delete(id);
        Heir? heir = heirs.FirstOrDefault(x => x.Id == id);
        if (heir != null)
        {
            heirs.Remove(heir);
        }
        family.Refresh();
        StateHasChanged();
    }

    private void Edit(Guid id)
    {
        Heir? heirEdit = heirs.FirstOrDefault(x => x.Id == id);
        if (heirEdit != null)
        {
            heir = heirEdit;
            isEditing = true;
        }
    }

    private void NavigateToAssets()
    {
        NavigationManager.NavigateTo("/aktiver");
    }
}
