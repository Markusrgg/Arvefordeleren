@rendermode InteractiveServer
@page "/asset"
@inject AssetService assetService
@inject NavigationManager NavigationManager

<h3>Asset</h3>
<br/>
@if (isCreating)
{
    <p>
        <CreateAssetComponent></CreateAssetComponent>
    </p>
    <p>
        <button class="btn btn-primary" @onclick="CancelCreateAsset">Fortryd</button>
    </p>
}
else
{
    <button class="btn btn-primary" @onclick="CallCreateAsset">Tilføj Aktiv</button>

    @* <a href="/asset/create" class="btn btn-primary">Tilføj Aktiv</a> *@
    <ul>
        @foreach (var asset in assets)
        {
            <li>
                <AssetComponent Asset="@asset"></AssetComponent>
                &nbsp;
                <EditForm Model="asset"
                FormName="@($"form-asset-{asset.Id}")"
                OnValidSubmit="@(() => {DeleteAsset(asset.Id);})">
                    <button type="submit" class="btn btn-primary">Delete</button>
                </EditForm>
            </li>
        }
    </ul>

}
<br/>




@code {
    private CreateAssetComponent createAsset;
    private List<Asset> assets { get; set; } = new List<Asset>();
    private bool isCreating;
    public void CallCreateAsset()
    {
        isCreating = true;
        NavigationManager.NavigateTo("/asset");
    }
    private void CreateAsset()
    {
        isCreating = false;
        createAsset.CreateAsset();
        NavigationManager.NavigateTo("/asset");
    }
    private void CancelCreateAsset()
    {
        isCreating = false;
        NavigationManager.NavigateTo("/asset");
    }
    protected override async Task OnInitializedAsync()
    {
        assets = await assetService.GetAllAssets();
    }
    private async Task DeleteAsset(Guid assetId)
    {
        await assetService.DeleteAsset(assetId);
        NavigationManager.NavigateTo("/asset");
    }
}

