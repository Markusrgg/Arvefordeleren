@rendermode InteractiveServer
@page "/asset"
@layout InformationLayout
@inject AssetService assetService

<h3>Asset</h3>
<br/>
@if (isCreating)
{
    <CreateAssetComponent @ref="createAssetComponent"></CreateAssetComponent>
    <button class="btn btn-primary" @onclick="CreateAsset">Tilføj</button>
    <button class="btn btn-primary" @onclick="CancelCreateAsset">Tilbage</button>
}
else
{
    <button class="btn btn-primary" @onclick="CallCreateAsset">Tilføj Aktiv</button>
}
<ul>
    @if (assets.Count > 0)
    {
        @foreach (var asset in assets)
        {
            <div style="display: inline-block;">
                <AssetComponent Asset="@asset"></AssetComponent>
                <EditForm Model="asset" FormName="@($"form-asset-{asset.Id}")" OnValidSubmit="@(() => {DeleteAsset(asset.Id);})">
                    <button type="submit" class="btn btn-primary">Delete</button>
                </EditForm>
            </div>
        }
    }
</ul>
<br/>




@code {
    private CreateAssetComponent createAssetComponent;
    private List<Asset> assets { get; set; } = new List<Asset>();
    private bool isCreating;

    public void CallCreateAsset()
    {
        isCreating = true;
    }
    private async Task CreateAsset()
    {
        await createAssetComponent.CreateAsset();
        assets = await assetService.GetAllAssets();
        isCreating = false;
        isCreating = true;
    }
    private void CancelCreateAsset()
    {
        isCreating = false;
    }
    protected override async Task OnInitializedAsync()
    {
        assets = await assetService.GetAllAssets();
    }
    private async Task DeleteAsset(Guid assetId)
    {
        await assetService.DeleteAsset(assetId);
    }
}

