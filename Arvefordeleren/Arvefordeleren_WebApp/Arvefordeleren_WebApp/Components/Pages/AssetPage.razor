@rendermode InteractiveServer

@page "/aktiver"

@layout InformationLayout
@inject AssetService AssetService
@inject HeirService HeirService
@inject TestatorService TestatorService
@inject NavigationManager NavigationManager

@if (!persons.Any())
{
    <h3>Udfyld personoplysninger først!</h3>
}
else
{

    <div>
        <div class="d-flex justify-content-start">
        <h4><strong>Aktiver og tildeling</strong></h4>
            <BlazorToolTip TooltipText="Indsæt tekst" />
        </div>
        <hr style="width: 28%;" />          
    </div>
    <p>
        Et <strong>aktiv</strong> i forhold til arv refererer til de værdier og ejendele, som afdøde efterlader sig.<br />
        Aktiver kan være:
    </p>

    <ul>
        <li><strong>Kontanter:</strong> Indestående på bankkonti og rede penge.</li>
        <li><strong>Ejendomme:</strong> f.eks hus(e) eller lejligheder.</li>
        <li><strong>Investeringer:</strong> Aktier, obligationer samt pensionsopsparinger.</li>
        <li><strong>Personlige ejendele:</strong> f.eks biler, smykker eller kunst.</li>
        <li><strong>Virksomheder eller ejerandele:</strong> Ejerandele i virksomhed(er).</li>
    </ul>

    <p>
        Når boet gøres op, trækkes gæld og forpligtelser fra aktiverne for at beregne, hvad der kan fordeles blandt arvingerne.
    </p>
    <br />

    <EditForm Model="asset" FormName="formAsset" OnValidSubmit="UpdateOrCreateAsset">

        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="row mb-3">
            <div class="col-2">
                <label class="col-form-label"><strong>Aktivet:</strong></label>
            </div>
            <div class="col-6 w-25">
                <InputText @bind-Value="asset.Name" class="form-control" />
            </div>
            <div class="col">
                <ValidationMessage For="() => asset.Name"></ValidationMessage>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-2 d-flex justify-content-start">
                <label class="col-form-label "><strong>Særeje:</strong></label>
                <BlazorToolTip TooltipText="Indsæt tekst" />
            </div>
            <div class="col-6 w-auto">
                <InputSelect @bind-Value="asset.SeparateEstate" class="form-control">
                    <option value="">Ingen valgt</option>
                    @foreach (var person in persons)
                    {
                        <option value="@person.FullName">
                            @person.FullName
                        </option>
                    }
                </InputSelect>
            </div>
        </div>
        <button class="btn btn-success" type="submit">@(isUpdating ? "Opdater" : "Tilføj")</button>
    </EditForm>
    @if (assets.Count > 0 && !isUpdating)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Aktiv</th>
                    <th>Særeje</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var asset in assets)
                {
                    <tr>
                        <td>@asset.Name</td>
                        <td>@asset.SeparateEstate</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => CallUpdateAsset(asset)">Rediger</button>
                            <button class="btn btn-primary" @onclick="() => DeleteAsset(asset.Id)">Fjern</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <br />
    <button class="btn btn-primary" @onclick="NavigateToInheritanceDistribution">Videre til arvefordeling</button>
}

@code {
    [SupplyParameterFromForm]
    private Asset asset { get; set; } = new Asset();
    private List<Asset> assets { get; set; } = new List<Asset>();
    private List<Person> persons { get; set; } = new List<Person>();
    private bool isCreating;
    private bool isUpdating;

    protected override async Task OnInitializedAsync()
    {
        assets = await AssetService.GetAll();
        isCreating = true;

        List<Heir> heirList = await HeirService.GetAll();
        List<Testator> testatorList = await TestatorService.GetAll();

        if (testatorList[0].WillType == WillType.Joint)
        {
            persons = heirList.Concat<Person>(testatorList).ToList();
        }
        else
        {
            persons = heirList.Cast<Person>().ToList();
        }
    }

    private void CallUpdateAsset(Asset asset)
    {
        this.asset = asset;
        isCreating = false;
        isUpdating = true;
    }

    private async Task UpdateOrCreateAsset()
    {
        if (isUpdating)
        {
            await AssetService.Update(asset);
            isUpdating = false;
            isCreating = true;
        }
        else if (isCreating)
        {
            await AssetService.Create(asset);
        }
        assets = await AssetService.GetAll();
        asset = new Asset();
    }

    private async Task DeleteAsset(Guid assetId)
    {
        await AssetService.Delete(assetId);
        assets = await AssetService.GetAll();
    }

    private void NavigateToInheritanceDistribution()
    {
        NavigationManager.NavigateTo("/fritvangsarv");
    }
}

