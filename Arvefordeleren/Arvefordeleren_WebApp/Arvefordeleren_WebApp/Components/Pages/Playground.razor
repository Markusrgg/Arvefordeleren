@rendermode InteractiveServer
@inject HeirService HeirService
@inject TestatorService TestatorService
@inject AssetService AssetService

@page "/playground"
@layout PlaygroundLayout

<PageTitle>Playground</PageTitle>

<script>
    document.addEventListener("DOMContentLoaded", () => {
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.forEach((tooltipTriggerEl) => {
    new bootstrap.Tooltip(tooltipTriggerEl);
    });
    });
</script>

<div class="d-flex flex-row playerground-container">
    <!-- Sidebar -->
    <div class="sidebar bg-light p-3">
        <div class="d-flex justify-content-end">
            <BlazorToolTip TooltipText="fytdytytyj" />
        </div>
        <h5 class="text-center" style="font-size: 25px;">Arvinger</h5>
        <br>
        <div class="d-flex flex-column gap-3">
            @foreach (Person person in Persons)
            {
                <div @onclick="(() => SelectedPerson = person)"
                class="heir-item @(person == SelectedPerson ? "selected" : "")"
                style="cursor: pointer;">
                    <HeirListItem Name="@person.FullName" Relation="@person.RelationType.ToString()"></HeirListItem>
                </div>
            }
        </div>
    </div>

    <!-- Main Content -->
    <div class="content flex-grow-1 p-3">
        <div class="container">
            <div class="row">
                <div class="col">
                    <div>
                        <div class="input-group mb-3 my-4">
                            <span class="input-group-text" id="inputGroup-sizing-default">Kr. </span>
                            <input type="text" class="form-control" aria-label="Sizing example input"
                            aria-describedby="inputGroup-sizing-default">
                        </div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <BlazorToolTip />
                    </div>
                    <h1 class="text-center">
                        @(SelectedPerson != null ? SelectedPerson.FullName : "") Aktiver
                    </h1>
                    <div class="asset-list d-flex flex-column gap-4">
                        @foreach (Asset asset in SelectedAsset)
                        {
                            <div class="d-flex justify-content-between align-items-center" style="padding: 5px; border-radius: 5px;">
                                <div>
                                    <label style="font-size:20px">@asset.Name</label>
                                </div>
                            </div>
                            <div>
                                <InputSelect @bind-Value="asset.SeparateEstate" class="form-control" @onchange="() => OnSeparateEstateChanged(asset)">
                                    <option value="">Ingen valgt</option>
                                    @foreach (Person person in Persons)
                                    {
                                        if (person.FullName != asset.SeparateEstate)
                                        {
                                            <option value="@person.FullName">
                                                @person.FullName
                                            </option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        }
                    </div>
                </div>
                <div class="col">
                    <div class="w-75 mx-auto">
                        <div class="d-flex justify-content-end">
                            <BlazorToolTip />
                        </div>
                        <BlazorChart @rendermode=InteractiveServer ChartType="ChartType.Pie" ChartData="Data" />
                        <BlazorChart @rendermode=InteractiveServer ChartType="ChartType.Pie" ChartData="Data" />
                    </div>
                    <div class="summary my-5">
                        <h2 class="text-center">Opsummering</h2>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    Dictionary<string, object> Data = new Dictionary<string, object>()
{
{"Test 1", 23},
{"Test 2", 25}
};
    public List<Person> Persons { get; set; } = new List<Person>();

    private Person _selectedPerson;
    public Person SelectedPerson 
    { 
        get{ return _selectedPerson; }
        set
        {
            _selectedPerson = value;
            SelectedAsset = Assets.FindAll(x => x.SeparateEstate == value.FullName); 
        }
    }

    public List<Asset> Assets { get; set; } = new List<Asset>();
    public List<Asset> SelectedAsset { get; set; } = new List<Asset>();

    protected override async Task OnInitializedAsync()
    {
        Assets = await AssetService.GetAll();
        List<Heir> heirList = await HeirService.GetAll();
        List<Testator> testatorList = await TestatorService.GetAll();
        try
        {
            if (testatorList[0] != null)
            {
                if (testatorList[0].WillType == WillType.Joint)
                {
                    Persons = heirList.Concat<Person>(testatorList).ToList();
                }
                else
                {
                    Persons = heirList.Cast<Person>().ToList();
                }
            }
        }
        catch (ArgumentOutOfRangeException){}
    }
    private async void OnSeparateEstateChanged(Asset asset)
    {
        await AssetService.Update(asset);
        Assets = await AssetService.GetAll();
        SelectedPerson = SelectedPerson;
    }
}