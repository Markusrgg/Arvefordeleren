@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using System.ComponentModel.DataAnnotations

@using Arvefordeleren_ClassLibrary.Models

<div class="row mb-3">
    <div class="col-2">
        <label class="col-form-label">Testamente type</label>
    </div>
    <div class="col-6">
        <InputRadioGroup @bind-Value="testator.WillType">
            <div class="form-check">
                <InputRadio id="individualWill" Value="WillType.Individual" class="form-check-input" />
                <label class="form-check-label" for="individualWill">Testamente til mig selv</label>
            </div>
            <div class="form-check">
                <InputRadio id="jointWill" Value="WillType.Joint" class="form-check-input" />
                <label class="form-check-label" for="jointWill">Fælles testamente</label>
            </div>
        </InputRadioGroup>
    </div>
</div>

<!-- Form for Individual Will -->
@if (testator.WillType == WillType.Individual)
{
    <h4>Individuelt testamente</h4>
    <EditForm Model="testator" EditContext="editContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="firstName" class="form-label">Fornavn</label>
                <InputText id="firstName" class="form-control" @bind-Value="testator.FirstName" />
            </div>
            <div class="col-md-6">
                <label for="lastName" class="form-label">Efternavn</label>
                <InputText id="lastName" class="form-control" @bind-Value="testator.LastName" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="dateOfBirth" class="form-label">Fødselsdag</label>
                <InputDate id="dateOfBirth" class="form-control" @bind-Value="testator.DateOfBirth" />
            </div>
            <div class="col-md-6">
                <label for="address" class="form-label">Adresse</label>
                <InputText id="address" class="form-control" @bind-Value="testator.Address" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Videre</button>
    </EditForm>
}

<!-- Form for Joint Will -->
@if (testator.WillType == WillType.Joint)
{
    <h4>Gensidigt Testamente</h4>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Civilstatus</label>
        </div>
        <div class="col-6">
            <InputRadioGroup @bind-Value="testator.MaritalStatus" class="d-flex gap-3">
                <div class="form-check">
                    <InputRadio id="married" Value="MaritalStatus.Married" class="form-check-input" />
                    <label class="form-check-label" for="married">Gift</label>
                </div>
                <div class="form-check">
                    <InputRadio id="partner" Value="MaritalStatus.Partner" class="form-check-input" />
                    <label class="form-check-label" for="partner">Samlever</label>
                </div>
            </InputRadioGroup>
        </div>
    </div>

    <EditForm Model="this" EditContext="editContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-6">
                <h5>Person 1</h5>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="firstName1" class="form-label">Fornavn</label>
                        <InputText id="firstName1" class="form-control" @bind-Value="testator.FirstName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="lastName1" class="form-label">Efternavn</label>
                        <InputText id="lastName1" class="form-control" @bind-Value="testator.LastName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="dateOfBirth1" class="form-label">Fødselsdag</label>
                        <InputDate id="dateOfBirth1" class="form-control" @bind-Value="testator.DateOfBirth" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="address1" class="form-label">Adresse</label>
                        <InputText id="address1" class="form-control" @bind-Value="testator.Address" />
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <h5>Person 2</h5>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="firstName2" class="form-label">Fornavn</label>
                        <InputText id="firstName2" class="form-control" @bind-Value="secondTestator.FirstName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="lastName2" class="form-label">Efternavn</label>
                        <InputText id="lastName2" class="form-control" @bind-Value="secondTestator.LastName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="dateOfBirth2" class="form-label">Fødselsdag</label>
                        <InputDate id="dateOfBirth2" class="form-control" @bind-Value="secondTestator.DateOfBirth" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="address2" class="form-label">Adresse</label>
                        <InputText id="address2" class="form-control" @bind-Value="secondTestator.Address" />
                    </div>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Videre</button>
    </EditForm>
}

@code {
    [Required]
    private Testator testator = new Testator
        {
            WillType = WillType.Individual // Default value
        };

    private Testator secondTestator = new Testator
        {
            WillType = WillType.Joint // Default value
        };

    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(this);
    }

    private async Task HandleValidSubmit()
    {
        if (editContext.Validate())
        {
            if (testator.WillType == WillType.Individual)
            {
                // Process Individual Will data
                Console.WriteLine($"Individuel: {testator.FirstName} {testator.LastName} {testator.DateOfBirth} {testator.Address}");
                // await SaveTestatorData(testator);
                NavigationManager.NavigateTo("/arvinger");
            }
            else if (testator.WillType == WillType.Joint)
            {
                // Process Joint Will data
                Console.WriteLine($"Fælles: {testator.FirstName} {testator.LastName} : {testator.DateOfBirth} : {testator.Address} & {secondTestator.FirstName} {secondTestator.LastName} : {secondTestator.DateOfBirth} : {secondTestator.Address}");
                // await SaveTestatorData(testator, secondTestator);
                NavigationManager.NavigateTo("/arvinger");
            }
        }
    }
    // private async Task SaveTestatorData(Testator testator)
    // {
    //     if (testator is null)
    //     {
    //         throw new ArgumentNullException(nameof(testator));
    //     }
    //     // Save data to database
    //     var response = await HttpClient.PostAsJsonAsync("api/testator", testator);
    //     response.EnsureSuccessStatusCode();
    // }
    // private async Task SaveTestatorData(Testator testator1, Testator testator2)
    // {
    //     if (testator1 is null)
    //     {
    //         throw new ArgumentNullException(nameof(testator1));
    //     }
    //     if (testator2 is null)
    //     {
    //         throw new ArgumentNullException(nameof(testator2));
    //     }
    //     // Save data to database
    //     var response1 = await HttpClient.PostAsJsonAsync("api/testator", testator1);
    //     response1.EnsureSuccessStatusCode();

    //     var response2 = await HttpClient.PostAsJsonAsync("api/testator", testator2);
    //     response2.EnsureSuccessStatusCode();
    // }
}
