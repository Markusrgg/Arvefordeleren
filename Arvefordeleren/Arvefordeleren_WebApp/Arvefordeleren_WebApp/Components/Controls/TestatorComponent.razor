@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@using Arvefordeleren_ClassLibrary.Models
@using Arvefordeleren_ClassLibrary.Services

@inject TestatorService TestatorService
@inject HeirService HeirService

<div class="row mb-3">
    <div class="col-2">
        <label class="col-form-label">Testamente type</label>
    </div>
    <div class="col-6">
        <InputRadioGroup @bind-Value="testator.WillType">
            <div class="form-check">
                <InputRadio id="individualWill" Value="WillType.Individual" class="form-check-input" @onclick="(() => testator.RelationType = RelationType.INDIVIDUAL)" />
                <label class="form-check-label" for="individualWill">Testamente til mig selv</label>
            </div>
            <div class="form-check">
                <InputRadio id="jointWill" Value="WillType.Joint" class="form-check-input" @onclick="(() => testator.RelationType = RelationType.MARRIED)" />
                <label class="form-check-label" for="jointWill">Fælles testamente</label>
            </div>
        </InputRadioGroup>
    </div>
</div>

<!-- Form for Individual Will -->
@if (testator.WillType == WillType.Individual)
{
    <h4>Individuelt testamente</h4>
    <EditForm Model="testator" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="firstName" class="form-label">Fornavn</label>
                <InputText id="firstName" class="form-control" @bind-Value="testator.FirstName" />
            </div>
            <div class="col-md-6">
                <label for="lastName" class="form-label">Efternavn</label>
                <InputText id="lastName" class="form-control" @bind-Value="testator.LastName" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="dateOfBirth" class="form-label">Fødselsdag</label>
                <InputDate id="dateOfBirth" class="form-control" @bind-Value="testator.DateOfBirth" />
            </div>
            <div class="col-md-6">
                <label for="address" class="form-label">Adresse</label>
                <InputText id="address" class="form-control" @bind-Value="testator.Address" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Videre</button>
    </EditForm>
}

<!-- Form for Joint Will -->
@if (testator.WillType == WillType.Joint)
{
    <h4>Gensidigt Testamente</h4>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label">Civilstatus</label>
        </div>
        <div class="col-6">
            <InputRadioGroup @bind-Value="testator.RelationType" class="d-flex gap-3">
                <div class="form-check">
                    <InputRadio id="married" Value="RelationType.MARRIED" class="form-check-input" />
                    <label class="form-check-label" for="married">@RelationType.MARRIED.GetDisplayName()</label>
                </div>
                <div class="form-check">
                    <InputRadio id="partner" Value="RelationType.PARTNER" class="form-check-input" />
                    <label class="form-check-label" for="partner">@RelationType.PARTNER.GetDisplayName()</label>
                </div>
            </InputRadioGroup>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h5>Person 1</h5>
            <EditForm Model="testator" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="firstName1" class="form-label">Fornavn</label>
                        <InputText id="firstName1" class="form-control" @bind-Value="testator.FirstName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="lastName1" class="form-label">Efternavn</label>
                        <InputText id="lastName1" class="form-control" @bind-Value="testator.LastName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="dateOfBirth1" class="form-label">Fødselsdag</label>
                        <InputDate id="dateOfBirth1" class="form-control" @bind-Value="testator.DateOfBirth" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="address1" class="form-label">Adresse</label>
                        <InputText id="address1" class="form-control" @bind-Value="testator.Address" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <button type="submit" class="btn btn-primary">Videre til arvinger</button>
                    </div>
                </div>
            </EditForm>
        </div>

        <div class="col-md-6">
            <h5>Person 2</h5>
            <EditForm Model="secondTestator" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="firstName2" class="form-label">Fornavn</label>
                        <InputText id="firstName2" class="form-control" @bind-Value="secondTestator.FirstName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="lastName2" class="form-label">Efternavn</label>
                        <InputText id="lastName2" class="form-control" @bind-Value="secondTestator.LastName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="dateOfBirth2" class="form-label">Fødselsdag</label>
                        <InputDate id="dateOfBirth2" class="form-control" @bind-Value="secondTestator.DateOfBirth" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="address2" class="form-label">Adresse</label>
                        <InputText id="address2" class="form-control" @bind-Value="secondTestator.Address" />
                    </div>
                </div>
                @*    <div class="row mb-3">
            <div class="col-md-6">
            <button type="submit" class="btn btn-primary">videre</button>
            </div>
            </div> *@
            </EditForm>
        </div>
    </div>
}

@code {
    List<Testator> testators = new List<Testator>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Setup();
            StateHasChanged();
        }
    }

    private async Task Setup()
    {
        testators = await TestatorService.GetAll();

        if (testators.Any())
        {
            testator = testators[0];
            if (testators.Count > 1)
            {
                secondTestator = testators[1];
            }
        }
    }

    private Testator testator = new Testator
        {
            WillType = WillType.Individual // Default value
        };

    private Testator secondTestator = new Testator
        {
            WillType = WillType.Joint // Default value
        };

    private async void HandleValidSubmit()
    {
        if (testator.WillType == WillType.Individual)
        {
            // Process Individual Will data
            Console.WriteLine($"Individuel: {testator.FirstName} {testator.LastName} {testator.DateOfBirth} {testator.Address}");

            Testator temp = testators.FirstOrDefault(x => x.Id == testator.Id);

            testator.RelationType = RelationType.INDIVIDUAL;
            if (temp != null)
            {
                if (testators.Count > 1)
                {
                    await TestatorService.Delete(testators[1].Id);
                    testator.Pids.Remove(testators[1].Id);
                    secondTestator = new Testator { WillType = WillType.Joint };
                }

                await TestatorService.Update(testator);
            }
            else
            {
                await TestatorService.Create(testator);
            }
            NavigationManager.NavigateTo("/arvinger");
        }
        else if (testator.WillType == WillType.Joint)
        {
            // Process Joint Will data
            Console.WriteLine($"Fælles: {testator.FirstName} & {secondTestator.FirstName} {testator.LastName} & {secondTestator.LastName} {testator.DateOfBirth} & {secondTestator.DateOfBirth} {testator.Address} & {secondTestator.Address}");

            testator.RelationType = RelationType.MARRIED;

            Testator temp = testators.FirstOrDefault(x => x.Id == testator.Id);
            if (temp != null)
            {
                if (!testator.Pids.Contains(secondTestator.Id))
                {
                    testator.Pids.Add(secondTestator.Id);
                }
                await TestatorService.Update(testator);
            }
            else
            {
                testator.Pids.Add(secondTestator.Id);
                await TestatorService.Create(testator);
            }

            Testator temp2 = testators.FirstOrDefault(x => x.Id == secondTestator.Id);
            if (temp2 != null)
            {
                secondTestator.RelationType = testator.RelationType;
                await TestatorService.Update(secondTestator);
            }
            else
            {
                secondTestator.Pids.Add(testator.Id);
                secondTestator.RelationType = testator.RelationType;
                await TestatorService.Create(secondTestator);

                // List<Testator> testators = await TestatorService.GetAll();
                // List<Heir> heirs = await HeirService.GetAll();
                // foreach (var heir in heirs)
                // {
                //     if (heir.Fid != Guid.Empty)
                //     {
                //         heir.Fid = testators[1].Id;

                //         await HeirService.Update(heir);
                //     }
                // }
            }
            NavigationManager.NavigateTo("/arvinger");

        }
    }
}
