@rendermode InteractiveServer //Brugerens handlinger bliver sendt til serveren og behandler dem 
@inject NavigationManager NavigationManager 

@inject TestatorService TestatorService
@inject HeirService HeirService 

<div>
    <h4><strong>Testamentetype og Personer</strong></h4>
    <hr style="width: 28%;" />
    <div class="d-flex justify-content-start">
        <p>Venligst vælg hvilken testamentetype du vil oprette.</p>
        <BlazorToolTip TooltipText="Indsæt tekst" />
    </div>
</div>

<div class="row mb-3">
    <div class="col-2">
        <label class="col-form-label"><strong>Testamente type:</strong></label>
    </div>
    <div class="col-6">
        <InputRadioGroup @bind-Value="testator.WillType">
            <div class="form-check">
                <InputRadio id="individualWill" Value="WillType.Individual" class="form-check-input" @onclick="(() => testator.RelationType = RelationType.INDIVIDUAL)" />
                <label class="form-check-label" for="individualWill">Indiviudelt testamente</label>
            </div>
            <div class="form-check">
                <InputRadio id="jointWill" Value="WillType.Joint" class="form-check-input" @onclick="(() => testator.RelationType = RelationType.MARRIED)" />
                <label class="form-check-label" for="jointWill">Gensidigt testamente</label>
            </div>
        </InputRadioGroup>
    </div>
</div>

<!-- Form for Individual Will -->
@if (testator.WillType == WillType.Individual)
{
    <h5><strong>Individuelt testamente</strong></h5>
    <p>Indtast venligst dine personoplysninger.</p>
    <EditForm Model="testator" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row mb-3 d-flex flex-column">
            <div class="col-md-6 w-25">
                <label for="firstName" class="form-label"><strong>Fornavn</strong></label>
                <InputText id="firstName" class="form-control" @bind-Value="testator.FirstName" />
            </div>
            <br />
            <div class="col-md-6 w-25">
                <label for="lastName" class="form-label"><strong>Efternavn</strong></label>
                <InputText id="lastName" class="form-control" @bind-Value="testator.LastName" />
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Videre</button>
    </EditForm>
}

<!-- Form for Joint Will -->
@if (testator.WillType == WillType.Joint)
{
    <h5><strong>Gensidigt Testamente</strong></h5>
    <p>Indtast venligst dine personoplysninger.</p>
    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label"><strong>Civilstatus:</strong></label>
        </div>
        <div class="col-6">
            <InputRadioGroup @bind-Value="testator.RelationType" class="d-flex gap-3">
                <div class="form-check">
                    <InputRadio id="married" Value="RelationType.MARRIED" class="form-check-input" />
                    <label class="form-check-label" for="married">@RelationType.MARRIED.GetDisplayName()</label>
                </div>
                <div class="form-check">
                    <InputRadio id="partner" Value="RelationType.PARTNER" class="form-check-input" />
                    <label class="form-check-label" for="partner">@RelationType.PARTNER.GetDisplayName()</label>
                </div>
            </InputRadioGroup>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h5><strong>1. Arvelader</strong> </h5>
            <EditForm Model="testator" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row mb-3">
                    <div class="col-md-12 w-50">
                        <label for="firstName1" class="form-label"><strong>Fornavn</strong></label>
                        <InputText id="firstName1" class="form-control" @bind-Value="testator.FirstName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12 w-50">
                        <label for="lastName1" class="form-label"><strong>Efternavn</strong></label>
                        <InputText id="lastName1" class="form-control" @bind-Value="testator.LastName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <button type="submit" class="btn btn-primary">Videre til arvinger</button>
                    </div>
                </div>
            </EditForm>
        </div>

        <div class="col-md-6">
            <h5><strong>2. Arvelader</strong> </h5>
            <EditForm Model="secondTestator" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row mb-3">
                    <div class="col-md-12 w-50">
                        <label for="firstName2" class="form-label"><strong>Fornavn</strong></label>
                        <InputText id="firstName2" class="form-control" @bind-Value="secondTestator.FirstName" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12 w-50">
                        <label for="lastName2" class="form-label"><strong>Efternavn</strong></label>
                        <InputText id="lastName2" class="form-control" @bind-Value="secondTestator.LastName" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    List<Testator> testators = new List<Testator>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupTestators();
            StateHasChanged();
        }
    }

    private async Task SetupTestators()
    {
        testators = await TestatorService.GetAll();

        // Hvis ingen testators, start en ny
        if (!testators.Any())
        {
            testator = new Testator { WillType = WillType.Individual };
            secondTestator = new Testator { WillType = WillType.Joint };
            return;
        }

        // Brug eksisterende testators
        testator = testators.FirstOrDefault() ?? new Testator { WillType = WillType.Individual };

        // Tjek om der er en anden testator for fælles testamente
        if (testators.Count > 1)
        {
            secondTestator = testators[1];
        }
        else
        {
            secondTestator = new Testator { WillType = WillType.Joint };
        }
    }

    private Testator testator = new Testator
        {
            WillType = WillType.Individual
        };

    private Testator secondTestator = new Testator
        {
            WillType = WillType.Joint
        };

    private async void HandleValidSubmit()
    {
        if (testator.WillType == WillType.Individual)
        {
            Testator temp = testators.FirstOrDefault(x => x.Id == testator.Id);

            testator.RelationType = RelationType.INDIVIDUAL;
            if (temp != null)
            {
                if (testators.Count > 1)
                {
                    await TestatorService.Delete(testators[1].Id);
                    testator.Pids.Remove(testators[1].Id);
                    secondTestator = new Testator { WillType = WillType.Joint };
                }

                await TestatorService.Update(testator);
            }
            else
            {
                await TestatorService.Create(testator);
            }
            NavigationManager.NavigateTo("/arvinger");
        }
        else if (testator.WillType == WillType.Joint)
        {
            Testator temp = testators.FirstOrDefault(x => x.Id == testator.Id);
            if (temp != null)
            {
                if (!testator.Pids.Contains(secondTestator.Id))
                {
                    testator.Pids.Add(secondTestator.Id);
                }
                await TestatorService.Update(testator);
            }
            else
            {
                testator.Pids.Add(secondTestator.Id);
                await TestatorService.Create(testator);
            }

            Testator temp2 = testators.FirstOrDefault(x => x.Id == secondTestator.Id);
            if (temp2 != null)
            {
                secondTestator.RelationType = testator.RelationType;
                await TestatorService.Update(secondTestator);
            }
            else
            {
                secondTestator.Pids.Add(testator.Id);
                secondTestator.RelationType = testator.RelationType;
                await TestatorService.Create(secondTestator);
            }
            NavigationManager.NavigateTo("/arvinger");
        }
    }
}
