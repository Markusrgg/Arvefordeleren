@rendermode InteractiveServer

@inject TestatorService TestatorService


<p>Fordeling for <span class="fw-bold">@Testator.FullName</span>:</p>

<div class="container">
    @if (Testator.Persons.Any())
    {
        <div class="row flex-nowrap overflow-auto">
            @foreach (Person person in Testator.Persons)
            {
                <div class="col-auto">
                    <div class="card" style="width: 15rem;">
                        <div class="card-body">
                            <p class="card-title fw-bold text-truncate">@person.FullName <br /></p>
                            <p class="card-subtitle mt-2 mb-2" style="font-size: 14px;"> <img src="img/@(person.RelationType).png" width="25" height="25" /> @person.RelationType.GetDisplayName()</p>

                            <br />
                            <p class="card-text" style="font-size: 14px;">Vælg procent:</p>
                            <input type="range" min="0" max="100" value="@person.Percent" @oninput="(e) => UpdateSliderValue(person, e.Value)" class="form-range" />
                            <p>Fordelt procent: <strong>@person.Percent%</strong></p>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="mt-4">
            <p>Total fordelt procent: <strong>@TotalPercent%</strong></p>
        </div>

        <button class="btn btn-success mb-2" type="button" @onclick="Save">Gem</button>
        <br />
    }
    else
    {
        <div class="row flex-nowrap overflow-auto">
            <div class="col-auto">
                <div class="card" style="width: 15rem;">
                    <div class="card-body">
                        <p class="card-body fw-bold text-truncate">Ingen arvinger tilføjet.. <br /></p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Testator Testator { get; set; }

    private int MaxSliderValue = 100;

    private int TotalPercent => Testator.Persons.OfType<Heir>().Sum(h => h.Percent) + Testator.Persons.OfType<Testator>().Sum(t => t.Percent);

    private void UpdateSliderValue(Person person, object value)
    {
        if (int.TryParse(value.ToString(), out int newValue))
        {
            int currentTotal = TotalPercent;
            int difference = newValue - person.Percent;

            if (currentTotal + difference <= MaxSliderValue)
            {
                person.Percent = newValue;
            }
        }
        StateHasChanged();
    }

    private async void Save()
    {
        if (TotalPercent < 100)
        {
            Console.WriteLine("Alle procent skal tildeles!");
        }
        else
        {
            await TestatorService.Update(Testator);
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Setup();

        StateHasChanged();
    }

    private void Setup()
    {
        if (Testator != null && Testator.Persons.Any())
        {
            int amount = Testator.Persons.Count;
            int percent = MaxSliderValue / amount;

            foreach (var item in Testator.Persons)
            {
                if (item.Percent == 0 || TotalPercent > 100)
                {
                    item.Percent = percent;
                }
            }
            StateHasChanged();
        }
    }
}